{"version":3,"sources":["components/Header.js","components/Formulario.js","components/Error.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","titulo","react_default","a","createElement","className","href","Formulario","datosConsulta","_useState","useState","ciudad","pais","_useState2","Object","slicedToArray","busqueda","guardarBusqueda","handleChange","e","objectSpread","defineProperty","target","name","value","onSubmit","preventDefault","type","id","onChange","htmlFor","defaultValue","Error","mensaje","Clima","resultado","main","parseInt","temp","temp_max","temp_min","App","componente","guardarCiudad","_useState3","_useState4","guardarPais","_useState5","_useState6","error","guardarError","_useState7","_useState8","guardarResultado","useEffect","asyncToGenerator","regenerator_default","mark","_callee","url","respuesta","wrap","_context","prev","next","concat","fetch","sent","json","stop","apply","this","arguments","consultarAPI","components_Error","cod","components_Clima","components_Header","components_Formulario","datos","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8771a5f.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header({titulo}) {\n    return(\n        <nav>\n            <div className=\"nav-wrapper light-blue darken-2\">\n                <a href=\"#!\" className=\"brand-logo\">{titulo}</a>\n            </div>\n        </nav>\n    )    \n}\n\nexport default Header;","import React, {useState} from 'react';\n\nfunction Formulario({datosConsulta}) {\n\n\n    // state del Componente\n    // busqueda = state, guardarBusqueda = this.setState({})\n    const [busqueda, guardarBusqueda] = useState({\n        ciudad: '',\n        pais: ''\n    })\n\n    const handleChange = e => {\n        // Cambiar el state\n        guardarBusqueda({\n            ...busqueda,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const consultaClima = e => {\n        e.preventDefault();\n\n        datosConsulta(busqueda);\n    }\n\n    return(\n        <form onSubmit={consultaClima}>\n            <div className=\"input-field col s12\">\n                <input \n                    type=\"text\"\n                    name=\"ciudad\"\n                    id=\"ciudad\"\n                    onChange={handleChange}\n                />\n                <label htmlFor=\"ciudad\">Ciudad: </label>\n            </div>\n            <div className=\"input-field col s12\">\n                <select onChange={handleChange} name=\"pais\">\n                    <option defaultValue value=\"\">Selecciona un país</option>\n                    <option value=\"US\">Estados Unidos</option>\n                    <option value=\"MX\">México</option>\n                    <option value=\"AR\">Argentina</option>\n                    <option value=\"CO\">Colombia</option>\n                    <option value=\"CR\">Costa Rica</option>\n                    <option value=\"ES\">España</option>\n                    <option value=\"PE\">Perú</option>\n                    <option value=\"SV\">El Salvador</option>\n                </select>\n            </div>\n            <div className=\"input-field col s12\">\n                <input type=\"submit\" className=\"waves-effect waves-light btn-large btn-block yellow accent-4\" value=\"Buscar Clima\"/>\n            </div>\n        </form>\n    )\n}\n\nexport default Formulario;","import React from 'react';\n\nfunction Error({mensaje}) {\n    return(\n        <div className=\"card-panel red darken-4 error col s12\">\n            {mensaje}\n        </div>\n    );\n}\n\nexport default Error;","import React from 'react';\n\nfunction Clima({resultado}) {\n\n    //extraer los valores\n    // console.log(resultado);\n\n    const {name, main} = resultado;\n    \n    if(!name) return null;\n\n    //restar grados kelvin\n    const kelvin = 273.15;\n\n    return(\n        <div className=\"card-panel white col s12\">\n            <div className=\"black-text\">\n                <h2>El clima de {name} es:</h2>\n                <p className=\"temperatura\">\n                    {parseInt(main.temp - kelvin, 10)} <span>&#x2103;</span>\n                </p>\n                <p>Max: {parseInt(main.temp_max - kelvin, 10)} &#x2103;</p>\n                <p>Max: {parseInt(main.temp_min - kelvin, 10)} &#x2103;</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Clima;","import React, {useState,useEffect} from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport Error from './components/Error';\nimport Clima from './components/Clima';\n\nfunction App() {\n\n  // State principal\n  // ciudad = state, guardarCiudad = this.setState()\n  const [ciudad, guardarCiudad] = useState('');\n  const [pais, guardarPais] = useState('');\n  const [error, guardarError] = useState(false);\n  const [resultado, guardarResultado] = useState({});\n\n  useEffect(() => {\n\n    // prevenir ejecución al inicio\n    if (ciudad === '') return;\n\n    const consultarAPI = async () => {\n\n      const appId = '1dc1c9db5367848d8d481492246d7624';\n  \n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n  \n      // consultar la URL\n  \n      const respuesta = await fetch(url);\n      const resultado = await respuesta.json();\n  \n      guardarResultado(resultado);\n    }\n\n    consultarAPI();\n\n  }, [ciudad, pais]);\n\n  const datosConsulta = datos => {\n\n    // Validar que ambos campos existan\n    if (datos.ciudad === '' || datos.pais === '') {\n      guardarError(true);\n      return;\n    }\n\n    // Ciudad y país existe, agregarlos al state\n    guardarCiudad(datos.ciudad);\n    guardarPais(datos.pais);\n    guardarError(false);\n\n  }\n\n\n\n  // Carga un componente condicionalmente\n  let  componente;\n\n  if (error) {\n    //Hay error, mostrarlo\n    componente = <Error mensaje='Ambos campos son obligatorios' />\n  } else if(resultado.cod === '404'){\n    componente = <Error mensaje='La ciudad no existe en nuestro registro' />\n  } else {\n    // Mostrar el Clima\n    componente = <Clima resultado={resultado}/>;\n  }\n\n\n  return (\n    <div className=\"App\">\n      <Header\n        titulo='Clima React App'\n      />\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col s12 m6\">\n              <Formulario\n                datosConsulta = {datosConsulta}\n              />\n            </div>\n            <div className=\"col s12 m6\">{componente}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}